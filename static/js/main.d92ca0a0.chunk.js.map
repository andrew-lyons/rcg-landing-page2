{"version":3,"sources":["rcg-logo-v4.png","component/Navbar.js","component/ComputerShowcase.js","component/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavbarComponent","props","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavbarText","ComputerShowcase","icon","faApple","size","faAndroid","faWindows","faGoogle","faLinux","faAmazon","faRaspberryPi","faBlackberry","JumbotronComponent","Jumbotron","Row","Col","md","Table","responsive","scope","style","App","img","require","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4JAAAA,EAAOC,QAAU,IAA0B,yC,mJCgC5BC,EArBS,SAACC,GAAW,IAAD,EACLC,oBAAS,GADJ,mBAC1BC,EAD0B,KAClBC,EADkB,KAKjC,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,iBACA,kBAACC,EAAA,EAAD,CAAeC,QANN,kBAAMP,GAAWD,MAO1B,kBAACS,EAAA,EAAD,CAAUT,OAAQA,EAAQU,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC7B,kBAACG,EAAA,EAAD,kCAEF,kBAACA,EAAA,EAAD,4B,cCZGC,EAAmB,kBACxB,6BACI,kBAAC,IAAD,CAAiBC,KAAMC,IAASC,KAAK,KAAKL,UAAU,iBACpD,kBAAC,IAAD,CAAiBG,KAAMG,IAAWD,KAAK,KAAKL,UAAU,iBACtD,kBAAC,IAAD,CAAiBG,KAAMI,IAAWF,KAAK,KAAKL,UAAU,iBACtD,kBAAC,IAAD,CAAiBG,KAAMK,IAAUH,KAAK,KAAKL,UAAU,iBACrD,kBAAC,IAAD,CAAiBG,KAAMM,IAASJ,KAAK,KAAKL,UAAU,iBACpD,kBAAC,IAAD,CAAiBG,KAAMO,IAAUL,KAAK,KAAKL,UAAU,iBACrD,kBAAC,IAAD,CAAiBG,KAAMQ,IAAeN,KAAK,KAAKL,UAAU,iBAC1D,kBAAC,IAAD,CAAiBG,KAAMS,IAAcP,KAAK,KAAKL,UAAU,mB,gCC6BtDa,EA1CY,SAAC3B,GACxB,OACI,6BACI,kBAAC4B,EAAA,EAAD,CAAWd,UAAU,yBACjB,kBAACe,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAACC,EAAA,EAAD,CAAOC,YAAU,GACb,+BACI,4BACI,wBAAIC,MAAM,OAAV,mBACA,gDAEJ,4BACI,wBAAIA,MAAM,OAAV,YACA,iDAEJ,4BACI,wBAAIA,MAAM,OAAV,UACA,0CAKhB,kBAACJ,EAAA,EAAD,CAAKC,GAAG,KACR,wBAAII,MAAO,CAAE9B,MAAO,YAApB,4CAEA,kBAACyB,EAAA,EAAD,KACI,kBAAC,EAAD,MACA,wBAAIhB,UAAU,SACd,wBAAIqB,MAAO,CAAE9B,MAAO,YAApB,mDAGR,wBAAIS,UAAU,SACd,oEACA,2DACA,kEACA,wBAAIA,UAAU,Y,YChBfsB,MAlBf,WACE,IAAMC,EAAMC,EAAQ,IACpB,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,MACA,kBAACe,EAAA,EAAD,CAAKf,UAAU,WACb,kBAACgB,EAAA,EAAD,CAAKC,GAAG,KACN,wBAAIjB,UAAU,WAAd,sBACA,yBAAKyB,IAAKF,EAAKvB,UAAU,mBAAmB0B,IAAI,UAElD,kBAACV,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC,EAAD,UCVUU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d92ca0a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rcg-logo-v4.bd09b2ab.png\";","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavbarText\n} from 'reactstrap';\n\nconst NavbarComponent = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand>RCG Home</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavbarText>New Website coming soon!</NavbarText>\n          </Nav>\n          <NavbarText>Parkersburg, WV</NavbarText>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default NavbarComponent;\n","import React from 'react'\nimport {\n    faApple,\n    faWindows,\n    faGoogle,\n    faLinux,\n    faAmazon,\n    faAndroid,\n    faRaspberryPi,\n    faBlackberry\n} from '@fortawesome/free-brands-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nexport const ComputerShowcase = () => (\n        <div>\n            <FontAwesomeIcon icon={faApple} size=\"3x\" className=\"icon-margins\" />\n            <FontAwesomeIcon icon={faAndroid} size=\"3x\" className=\"icon-margins\"/>            \n            <FontAwesomeIcon icon={faWindows} size=\"3x\" className=\"icon-margins\"/>\n            <FontAwesomeIcon icon={faGoogle} size=\"3x\" className=\"icon-margins\"/>\n            <FontAwesomeIcon icon={faLinux} size=\"3x\" className=\"icon-margins\"/>\n            <FontAwesomeIcon icon={faAmazon} size=\"3x\" className=\"icon-margins\"/>\n            <FontAwesomeIcon icon={faRaspberryPi} size=\"3x\" className=\"icon-margins\"/>\n            <FontAwesomeIcon icon={faBlackberry} size=\"3x\" className=\"icon-margins\"/>\n        </div>\n    )","import React from 'react';\nimport { ComputerShowcase } from './ComputerShowcase.js'\nimport {\n    Jumbotron,\n    Table,\n    Row,\n    Col,\n} from 'reactstrap';\n\nconst JumbotronComponent = (props) => {\n    return (\n        <div>\n            <Jumbotron className=\"smol-jumbotron-margin\">\n                <Row>\n                    <Col md=\"7\">\n                        <Table responsive>\n                            <tbody>\n                                <tr>\n                                    <th scope=\"row\">Monday - Friday</th>\n                                    <td>9:00AM - 5:00PM</td>\n                                </tr>\n                                <tr>\n                                    <th scope=\"row\">Saturday</th>\n                                    <td>12:00PM - 3:00PM</td>\n                                </tr>\n                                <tr>\n                                    <th scope=\"row\">Sunday</th>\n                                    <td>Closed</td>\n                                </tr>\n                            </tbody>\n                        </Table>\n                    </Col>\n                    <Col md=\"5\">\n                    <h2 style={{ color: \"#89c43e\" }} >Your Local Repair for ALL major devices</h2>\n                    </Col>\n                    <Col>\n                        <ComputerShowcase />\n                        <hr className=\"my-3\" />\n                        <h3 style={{ color: \"#89c43e\" }} >Don't see your device listed? Give us a call!</h3>\n                    </Col>\n                </Row>\n                <hr className=\"my-3\" />\n                <h1>Free Estimates + Warrantied Repairs!</h1>\n                <h3>Call or Text - 304-422-4335</h3>\n                <h3>Email - reallycheapgeeks@gmail.com</h3>\n                <hr className=\"my-3\" />\n            </Jumbotron>\n        </div>\n    );\n};\n\nexport default JumbotronComponent;\n","import React from 'react';\nimport NavbarComponent from './component/Navbar.js'\nimport JumbotronComponent from './component/Jumbotron.js'\nimport {\n  Row,\n  Col\n} from 'reactstrap'\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\nfunction App() {\n  const img = require('./rcg-logo-v4.png')\n  return (\n    <div className=\"App\">\n      <NavbarComponent />\n      <Row className=\"content\">\n        <Col md=\"5\">\n          <h1 className=\"content\" >Really Cheap Geeks</h1>\n          <img src={img} className=\"App-logo content\" alt=\"logo\" />\n        </Col>\n        <Col md=\"7\">\n          <JumbotronComponent />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}